-----------------------------------------------------------
CHAPTER 5 - SPORTS STORE - A REAL APPLICATION
-----------------------------------------------------------

- Starting the Project

    - Our application, SportsStore, will have an online product catalog, shopping cart,
        checkout, and admin page.

        # Create the application
        $ npx create-react-app sportsstore



- Required Packages

    - We need to install additional packages for this project.

        # Install additional packages
        cd sportsstore
        npm install bootstrap@4.1.2
        npm install @fortawesome/fontawesome-free@5.6.1
        npm install redux@4.0.1
        npm install react-redux@6.0.0
        npm install react-router-dom@4.3.1
        npm install axios@0.18.0
        npm install graphql@14.0.2
        npm install apollo-boost@0.1.22
        npm install react-apollo@2.3.2


    - Here is what those packages do:

        bootstrap
          This package provides the CSS styles that I used to present HTML content 
            throughout the book.

        fontawesome-free
          This package provides icons that can be included in HTML content. I have used the 
            free package, but there is a more comprehensive paid-for option available, too.

        redux
          This package provides a data store, which simplifies the process of coordinating the 
            different parts of the application.

        react-redux
          This package integrates a Redux data store into a React application.

        react-router-dom
          This package provides URL routing, which allows the content presented to the user to 
            be selected based on the browserâ€™s current URL.

        axios
          This package is used to make HTTP requests and will be used to access RESTful and 
            GraphQL services.

        graphql
          This package contains the reference implementation of the GraphQL specification.

        apollo-boost
          This package contains a client used to consume a GraphQL service.

        react-apollo
          This package is used to integrate the GraphQL client into a React application.


    - We also need a few packages for creating the back-end services the applicaion will 
        consume.  We install them with the '--save-dev' argument, which indicates that they are
        used during development and will not be included when the application is deployed.

        npm install --save-dev json-server@0.14.2
        npm install --save-dev jsonwebtoken@8.1.1
        npm install --save-dev express@4.16.4
        npm install --save-dev express-graphql@0.7.1
        npm install --save-dev cors@2.8.5
        npm install --save-dev faker@4.1.0
        npm install --save-dev chokidar@2.0.4
        npm install --save-dev npm-run-all@4.1.3
        npm install --save-dev connect-history-api-fallback@1.5.0


    - Here is what those packges do:

        json-server
          This package will be used to provide a RESTful web service.

        jsonwebtoken
          This package will be used to authenticate users.

        graphql
          This package will be used to define the schema for the GraphQL server.

        express
          This package will be used to host the back-end servers.

        express-graphql
          This package will be used to create a GraphQL server.

        cors
          This package is used to enable cross-origin request sharing (CORS) requests.

        faker
          This package generates fake data for testing.

        chokidar
          This package monitors files for changes.

        npm-run-all
          This package is used to run multiple NPM scripts in a single command.

        connect-history-api-fallback
          This package is used to respond to HTTP requests with the index.html file and 
            is used in the production server.



- Adding the CSS Stylesheets

    - Next, we need to import the stylesheets for the Bootstrap and Font Awesome packages.

        # Add to index.js
        import "bootstrap/dist/css/bootstrap.css";
        import "@fortawesome/fontawesome-free/css/all.min.css"; 



- Preparing the Web Service

    - First, we add a file of mock data.

        # File: sportsstore/data.js

        module.exports = function () {
            return {
                categories: ["Watersports", "Soccer", "Chess"],
                products: [
                    { id: 1, name: "Kayak", category: "Watersports",
                        description: "A boat for one person", price: 275 },
                    { id: 2, name: "Lifejacket", category: "Watersports",
                        description: "Protective and fashionable", price: 48.95 },
                    { id: 3, name: "Soccer Ball", category: "Soccer",
                        description: "FIFA-approved size and weight", price: 19.50 },
                    { id: 4, name: "Corner Flags", category: "Soccer",
                        description: "Give your playing field a professional touch",
                        price: 34.95 },
                    { id: 5, name: "Stadium", category: "Soccer",
                        description: "Flat-packed 35,000-seat stadium", price: 79500 },
                    { id: 6, name: "Thinking Cap", category: "Chess",
                        description: "Improve brain efficiency by 75%", price: 16 },
                    { id: 7, name: "Unsteady Chair", category: "Chess",
                        description: "Secretly give your opponent a disadvantage",
                        price: 29.95 },
                    { id: 8, name: "Human Chess Board", category: "Chess",
                        description: "A fun game for the family", price: 75 },
                    { id: 9, name: "Bling Bling King", category: "Chess",
                        description: "Gold-plated, diamond-studded King", price: 1200 }
                ],
                orders: []
            }
        }


    - We also add 'server.js', which creates a web service that will provide the application
        with data.

        # File: sportsstore/server.js

        const express = require("express");
        const jsonServer = require("json-server");
        const chokidar = require("chokidar");
        const cors = require("cors");

        const fileName = process.argv[2] || "./data.js"
        const port = process.argv[3] || 3500;

        let router = undefined;

        const app = express();

        const createServer = () => {
            delete require.cache[require.resolve(fileName)];
            setTimeout(() => {
                router = jsonServer.router(fileName.endsWith(".js")
                    ? require(fileName)() : fileName);
            }, 100)
        }
        createServer();

        app.use(cors());
        app.use(jsonServer.bodyParser)
        app.use("/api", (req, resp, next) => router(req, resp, next));

        chokidar.watch(fileName).on("change", () => {
            console.log("Reloading web service data...");
            createServer();
            console.log("Reloading web service data complete.");
        });

        app.listen(port, () => console.log(`Web service running on port ${port}`));


    - Now, we update the 'scripts' section of the package.json file to also start the server
        when we start the React app.

        # Update package.json
        "scripts": {
          "start": "npm-run-all --parallel reactstart webservice",
          "reactstart": "react-scripts start",
          "webservice": "node server.js",
          ...
        }



- Running the Example Application

    - Now, we can start the application and check that the web server is running.

        # Start server and React application
        $ npm start

        # Test web service
        $ curl localhost:3500/api/products/1



- Creating the Data Store

    - The starting point for the SportsStore is the data store, which will be the repository
        for data presented to the user and the supporting details required to coordinate
        features like pagination.


    - We'll start with a data store that uses local placeholder data.  We'll add retrieving
        it from a web service later.  The data store will be created using the Redux package.

        # File: src/data/placeholderData.js
        export const data = {
            categories: ["Watersports", "Soccer", "Chess", "Running"],
            products: [
                { id: 1, name: "P1", category: "Watersports",
                    description: "P1 (Watersports)", price: 3 },
                { id: 2, name: "P2", category: "Watersports",
                   description: "P2 (Watersports)", price: 4 },
                { id: 3, name: "P3", category: "Running",
                   description: "P3 (Running)", price: 5 },
                { id: 4, name: "P4", category: "Chess",
                   description: "P4 (Chess)", price: 6 },
                { id: 5, name: "P5", category: "Chess",
                   description: "P6 (Chess)", price: 7 },
            ]
        }



- Creating the Data Store Actions and Action Creators

    - Redux data stores separate reading data from the operations that change it.  This can 
        feel awkward at first, but quickly becomes second nature.


    - 'Actions' are objects that are sent to the data store to make changes to the data it
        contains.  Actions have types, and action objects are created using 'action creators'.

      Our first action is to load data into the store, initially just the placeholder data.


    - First, we'll create a list of the data types in the store.  There is no requirement to
        use uppercase, but the constants can help avoid name collisions down the road.

        # File: src/data/Types.js

        export const DataTypes = {
            PRODUCTS: 'products',
            CATEGORIES: 'categories'
        }

        export const ActionTypes = {
            DATA_LOAD: 'data_load'
        }


    - Next, we need an 'action creator' function, which will create an action object that can
        be processed by the data store to alter the data it contains.

        # File: src/data/ActionCreators.js

        import { ActionTypes } from "./Types";
        import { data as phData } from "./placeholderData";

        export const loadData = (dataType) => ({
            type: ActionTypes.DATA_LOAD,
            payload: {
                dataType: dataType,
                data: phData[dataType]
            }
        });






- Creating the Shopping Features

- Creating the Product and Category Components

- Connecting to the Data Store and URL Router

- Adding the Shop to the Application

- Improving the Category Selection Buttons

- Extending the Data Store to Add the Shopping Cart

- Creating the Cart Summary Component

- Adding the Cart Detail Component

- Adding the Cart URL to the Routing Configuration