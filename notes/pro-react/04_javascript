-----------------------------------------------------------
CHAPTER 4 - JAVASCRIPT
-----------------------------------------------------------

- Creating Project

    - JavaScript has been modernized in recent years with the addition of new language
        features and utility functions.  

      Since not all browsers support the latest features, React includes the Babel package,
        which will translate these features into code that will work in most mainstream
        browsers.


    - We'll keep using the 'primer' project from Chapter 3.  First, we'll create a new file
        for testing things out.

        # File: src/example.js
        console.log("Hello");


    - And, we'll need to add our new file to incorporate it into the application.

        # Add to src/index.js after other imports
        import "./example";


    - Start the application.

        $ npm start

      Now, open the Developer Tools in your web browser, and should see the 'Hello' printed.



- Using Statements

    - Statement-terminating semicolons are optional, but adding them makes code more readable
        and allows multiple statements on a single line.



- Defining and Using Functions

    - To define a function:

        const myFunc = function () {
            console.log('Inside the function.');
        }

        myFunc();


    - Define a function without explicitly defining a variable.

        function myFunc() {
            console.log('Inside the function');
        }

        myFunc();



- Defining Functions With Parameters

    - To define parameters for functions:

        function myFunc(name, weather) {
            console.log("Hello " + name + ".");
            console.log("It is " + weather + " today.");
        }

        myFunc("Adam", "sunny");


    - If you call the function with fewer arguments than it has parameters, the values of
        parameters not passed is 'undefined'.  If you call the function with extra arguments, 
        they are ignored.

      To add default values for parameters,

        function myFunc(name, weather = "raining") {
            console.log("Hello " + name + ".");
            console.log("It is " + weather + " today.");
        }

        myFunc("Adam"); 


    - 'Rest parameters' are used to capture any additional arguments when a function is invoked
        with additional arguments.

        function myFunc(name, weather, ...extraArgs) {
            console.log("Hello " + name + ".");
            console.log("It is " + weather + " today.");
            for (let i = 0; i < extraArgs.length; i++) {
                console.log("Extra Arg: " + extraArgs[i]);
            }
        }

        myFunc("Adam", "sunny", "one", "two", "three");



- Defining Functions That Return Results

    - The 'return' keyword is used to return results.  If no return statement is included, 
        'undefined' is returned from the function.

         function myFunc(name) {
             return ("Hello " + name + ".");
         }

         console.log(myFunc("Adam")); 



- Using Functions as Arguments to Other Functions

    - JavaScript functions can be treated as objects, which means one function can be
        used as an argument to another.

        function myFunc(nameFunction) {
            return ("Hello " + nameFunction() + ".");
        }

        function printName(nameFunction, printFunction) {
            printFunction(myFunc(nameFunction));
        }

        printName(function () { return "Adam" }, console.log);



- Using Arrow Functions

    - Arrow functions (aka 'fat arrow functions' or 'lambda expressions') are another way
        to define functions, usually functions that are arguments to other functions.

        const myFunc = (nameFunction) => ("Hello " + nameFunction() + ".");

        const printName = (nameFunction, printFunction) =>
            printFunction(myFunc(nameFunction));

        printName(function () { return "Adam" }, console.log);


    - The input parameters are in the parentheses, and the result of the statement after the arrow
        is returned from the function.

      The 'return' keyword and {} are only required if the arrow function needs to execute more
        than one statement.



- Using Variables and Types

- Using Variable Closure

- Using the Primitive Types

    - Booleans
    - Strings
    - Template Strings
    - Numbers

- Operators

- Conditionals

- The Equality and Identity Operators

- Explicitly Converting Types

- Working With Arrays

- Reading and Modifying Arrays

- Enumerating the Contents of an Array

- Using the Spread Operator

- Using the Built-in Array Methods

- Working With Objects

- Using Object Literals

- Using Variables as Object Properties

- Using Functions as Methods

- Using Classes

- Copying Properties From One Object to Another

- Capturing Parameter Names From Objects

- Creating and Using a JavaScript Module

- Understanding Module Locations

- Exporting Named Features From a Module

- Defining Multiple Named Features in a Module

- Changing Module Feature Names

- Importing an Entire Module

- Understanding the Asynchronous Operation Problem

- Using a JavaScript Promise

- Simplifying the Asynchronous Code
