-----------------------------------------------------------
CHAPTER 4 - JAVASCRIPT
-----------------------------------------------------------

- Creating Project

    - JavaScript has been modernized in recent years with the addition of new language
        features and utility functions.  

      Since not all browsers support the latest features, React includes the Babel package,
        which will translate these features into code that will work in most mainstream
        browsers.


    - We'll keep using the 'primer' project from Chapter 3.  First, we'll create a new file
        for testing things out.

        # File: src/example.js
        console.log("Hello");


    - And, we'll need to add our new file to incorporate it into the application.

        # Add to src/index.js after other imports
        import "./example";


    - Start the application.

        $ npm start

      Now, open the Developer Tools in your web browser, and should see the 'Hello' printed.



- Using Statements

    - Statement-terminating semicolons are optional, but adding them makes code more readable
        and allows multiple statements on a single line.


    - Syntax warnings received when a React project is built come from the 'ESLint' package.



- Defining and Using Functions

    - To define a function:

        const myFunc = function () {
            console.log('Inside the function.');
        }

        myFunc();


    - Define a function without explicitly defining a variable.

        function myFunc() {
            console.log('Inside the function');
        }

        myFunc();



- Defining Functions With Parameters

    - To define parameters for functions:

        function myFunc(name, weather) {
            console.log("Hello " + name + ".");
            console.log("It is " + weather + " today.");
        }

        myFunc("Adam", "sunny");


    - If you call the function with fewer arguments than it has parameters, the values of
        parameters not passed is 'undefined'.  If you call the function with extra arguments, 
        they are ignored.

      To add default values for parameters,

        function myFunc(name, weather = "raining") {
            console.log("Hello " + name + ".");
            console.log("It is " + weather + " today.");
        }

        myFunc("Adam"); 


    - 'Rest parameters' are used to capture any additional arguments when a function is invoked
        with additional arguments.

        function myFunc(name, weather, ...extraArgs) {
            console.log("Hello " + name + ".");
            console.log("It is " + weather + " today.");
            for (let i = 0; i < extraArgs.length; i++) {
                console.log("Extra Arg: " + extraArgs[i]);
            }
        }

        myFunc("Adam", "sunny", "one", "two", "three");



- Defining Functions That Return Results

    - The 'return' keyword is used to return results.  If no return statement is included, 
        'undefined' is returned from the function.

         function myFunc(name) {
             return ("Hello " + name + ".");
         }

         console.log(myFunc("Adam")); 



- Using Functions as Arguments to Other Functions

    - JavaScript functions can be treated as objects, which means one function can be
        used as an argument to another.

        function myFunc(nameFunction) {
            return ("Hello " + nameFunction() + ".");
        }

        function printName(nameFunction, printFunction) {
            printFunction(myFunc(nameFunction));
        }

        printName(function () { return "Adam" }, console.log);



- Using Arrow Functions

    - Arrow functions (aka 'fat arrow functions' or 'lambda expressions') are another way
        to define functions, usually functions that are arguments to other functions.

        const myFunc = (nameFunction) => ("Hello " + nameFunction() + ".");

        const printName = (nameFunction, printFunction) =>
            printFunction(myFunc(nameFunction));

        printName(function () { return "Adam" }, console.log);


    - The input parameters are in the parentheses, and the result of the statement after the arrow
        is returned from the function.

      The 'return' keyword and {} are only required if the arrow function needs to execute more
        than one statement.



- Using Variables and Types

    - The 'let' statement is used to declare variables that can change.
      The 'const' statement is used to create constants that cannot be modified.

      The 'var' statement is now deprecated, but still often used.


    - For an illustration of why the 'let' keyword was introduced to replace 'var',

        1. Use let, which has block scope.

             function messageFunction(name, weather) {
                 let message = "Hello, Adam";
                 if (weather === "sunny") {
                     let message = "It is a nice day";
                     console.log(message);
                 } else {
                     let message = "It is " + weather + " today";
                     console.log(message);
                 }
                 console.log(message);
             }

             messageFunction("Adam", "raining");

             # Results
             It is raining today
             Hello, Adam


        2. Use var, which scopes variables to the containing function.  This leads to some very
             confusing bugs, even for experienced JavaScript developers.

             function messageFunction(name, weather) {
                 var message = "Hello, Adam";
                 if (weather === "sunny") {
                     var message = "It is a nice day";
                     console.log(message);
                 } else {
                     var message = "It is " + weather + " today";
                     console.log(message);
                 }
                 console.log(message);
             }

             messageFunction("Adam", "raining");
             
             # Results
             It is raining today
             It is raining today



- Using Variable Closure

    - If you define a function inside of another function, then the inner function is able to 
        access the outer function's variables.  This feature is called a 'closure'.

        function myFunc(name) {
            let myLocalVar = "sunny";
            let innerFunction = function () {
                return ("Hello " + name + ". Today is " + myLocalVar + ".");
            }
            return innerFunction();
        }

        console.log(myFunc('Adam'));


    - This is a powerful feature that means you don't have to define parameters on inner functions
        to pass around data values, but caution is required.



- Using the Primitive Types

    - Booleans

        # Declare bools
        let firstBool = true;
        let secondBool = false;


    - Strings

        # Declare strings
        let firstString = "this is a string";
        let secondString = "this is also a string";

        # String length
        firstString.length

        # Common string methods
        charAt(index)
        concat(string)
        indexOf(term, start)
        replace(term, newTerm)
        slice(start, end)
        split(term)
        toUpperCase()
        toLowerCase()
        trim() 


    - Template Strings

        # Template strings are between backticks
        let message = `It is ${weather} today.`;


    - Numbers

        # The number type is used to represent both int and floating point
        let daysInWeek = 7;
        let pi = 3.14;
        let hexValue = 0xFFFF;



- Operators

    Operator                Description
    ---------------------------------------------------------------------------------
    ++, --                  Pre- or post-increment and decrement

    +, -, *, /, %           Addition, subtraction, multiplication, division, remainder

    <, <=, >, >=            Less than, less than or equal to, more than, more than or equal to

    ==, !=                  Equality and inequality tests

    ===, !==                Identity and nonidentity tests

    &&, ||                  Logical AND and OR (|| is used to coalesce null values)

    =                       Assignment

    +                       String concatenation

    ?:                      Three-operand conditional statement



- Conditionals

    - Here is an if/else statement:

        let name = "Adam";

        if (name === "Adam") {
            console.log("Name is Adam");
        } else if (name === "Jacqui") {
            console.log("Name is Jacqui");
        } else {
            console.log("Name is neither Adam or Jacqui");
        }


    - Here is a switch/case:

        switch (name) {
            case "Adam":
                console.log("Name is Adam");
                break;
            case "Jacqui":
                console.log("Name is Jacqui");
                break;
            default:
                console.log("Name is neither Adam or Jacqui");
                break;
        }



- The Equality and Identity Operators

    - The equality operator == will automatically attempt type conversion.

        let firstVal = 5;
        let secondVal = "5";

        if (firstVal == secondVal) {
            console.log("They are the same");
        } else {
            console.log("They are NOT the same");
        }

        # Output
        They are the same


    - The identity operator === will not attempt type conversion.

        if (firstVal === secondVal) {
            console.log("They are the same");
        } else {
            console.log("They are NOT the same");
        }

        # Output
        They are NOT the same



- Explicitly Converting Types

    - The 'toString()' method can be used to convert numbers to strings.  The 'String'
        function can also be used.

        let myData = (5).toString() + String(5);
        console.log(myData);

        # Output 55


    - The 'Number', 'parseInt', and 'parseFloat' functions can be used to conver strings
        to numbers.

        let a = Number("5);
        let b = parseInt("10");
        let c = parseFloat("15.25");



- Working With Arrays 

    - Create and populate an array:

        let myArray = new Array();
        myArray[0] = 100;
        myArray[1] = "Adam";
        myArray[2] = true;


    - Use an array literal:

        let myArray = [100, "Adam", true];


    - Read and write from array:

        myArray[0]
        myArray[0] = "Tuesday";


    - Enumerating the contents of the array:

        let myArray = [100, "Adam", true];

        # Enumerate with iterator
        for (let i = 0; i < myArray.length; i++) {
            console.log(`Index ${i}: ${myArray[i]}`);
        }

        # Enumerate with forEach method
        myArray.forEach((value, index) => console.log(`Index ${index}: ${value}`));



- Using the Spread Operator

    - The spread operator is used to expand an array so that its contents can be used as
        function arguments.  

        function printItems(numValue, stringValue, boolValue) {
            console.log(`Number: ${numValue}`);
            console.log(`String: ${stringValue}`);
            console.log(`Boolean: ${boolValue}`);
        }

        let myArray = [100, "Adam", true];

        # Without spread operator
        printItems(myArray[0], myArray[1], myArray[2]);

        # With spread operator
        printItems(...myArray);


    - The spread operator also makes it easy to concatenate arrays.

        let myArray = [100, "Adam", true];
        let myOtherArray = [200, "Bob", false, ...myArray];



- Using the Built-in Array Methods

    Method                  Description
    ------------------------------------------------------------------------------
    concat(otherArray)      This method returns a new array that concatenates the array on 
                              which it has been called with the array specified as the 
                              argument. Multiple arrays can be specified.

    join(separator)         This method joins all the elements in the array to form a string. 
                              The argument specifies the character used to delimit the items.

    pop()                   This method removes and returns the last item in the array.

    shift()                 This method removes and returns the first element in the array.

    push(item)              This method appends the specified item to the end of the array.

    unshift(item)           This method inserts a new item at the start of the array.

    reverse()               This method returns a new array that contains the items in reverse 
                              order.

    slice(start,end)        This method returns a section of the array.

    sort()                  This method sorts the array. An optional comparison function can be 
                              used to perform custom comparisons.

    splice(index, count)    This method removes count items from the array, starting at the 
                              specified index. The removed items are returned as the result of 
                              the method.

    unshift(item)           This method inserts a new item at the start of the array.

    every(test)             This method calls the test function for each item in the array and 
                              returns true if the function returns true for all of them and false 
                              otherwise.

    some(test)              This method returns true if calling the test function for each item in 
                              the array returns true at least once.

    filter(test)            This method returns a new array containing the items for which the test 
                              function returns true.

    find(test)              This method returns the first item in the array for which the test 
                              function returns true.

    findIndex(test)         This method returns the index of the first item in the array for which 
                              the test function returns true.

    forEach(callback)       This method invokes the callback function for each item in the array, as 
                              described in the previous section.

    includes(value)         This method returns true if the array contains the specified value.

    map(callback)           This method returns a new array containing the result of invoking the 
                              callback function for every item in the array.

    reduce(callback)        This method returns the accumulated value produced by invoking the callback
                              function for every item in the array.



    - For example:

        let products = [
            { name: "Hat", price: 24.5, stock: 10 },
            { name: "Kayak", price: 289.99, stock: 1 },
            { name: "Soccer Ball", price: 10, stock: 0 },
            { name: "Running Shoes", price: 116.50, stock: 20 }
        ];

        # Filter and reduce array
        let totalValue = products
            .filter(item => item.stock > 0)
            .reduce((prev, item) => prev + (item.price * item.stock), 0);

        console.log(`Total value: $${totalValue.toFixed(2)}`);
        
        # Output
        Total value: $2864.99



- Working With Objects

    - We can create objects using the 'new Object()' statement.

        let myData = new Object();
        myData.name = "Adam";
        myData.weather = "sunny";

        console.log(`Hello ${myData.name}.`);
        console.log(`Today is ${myData.weather}.`);



- Using Object Literals

    - The standard way to define objects is to use object literal format.

        let myData = {
            name: "Adam",
            weather: "sunny"
        };

        console.log(`Hello ${myData.name}.`);
        console.log(`Today is ${myData.weather}.`);



- Using Variables as Object Properties

    - If you use a variable name as an object property, the variable name will be the
        property name, and the variable value will be the property value.

         let name = "Adam"

         let myData = {
           name,
           weather: "sunny"
         };

         console.log(`Hello ${myData.name}.`);
         console.log(`Today is ${myData.weather}.`);



- Using Functions as Methods

    - Functions can be added to objects, effectively creating methods.

        let myData = {
            name: "Adam",
            weather: "sunny",
            printMessages: function () {
                console.log(`Hello ${myData.name}.`);
                console.log(`Today is ${myData.weather}.`);
            }
        };

        myData.printMessages(); 


    - Fat arrow syntax can also be used.

        let myData = {
            name: "Adam",
            weather: "sunny",
            printMessages: () => {
                console.log(`Hello ${myData.name}.`);
                console.log(`Today is ${myData.weather}.`);
            }
        };


    - Tip: If you return an object literal as a result of an arrow function, it must be
        enclosed in parentheses.

        myFunc: () => ({ data: "hello" })



- Using Classes

    - Classes are a recent addition to JavaScript.  They are used in React to define 
        components that have state data.

         class MyData {
             constructor() {
                 this.name = "Adam";
                 this.weather = "sunny";
             }
             printMessages = () => {
                 console.log(`Hello ${this.name}.`);
                 console.log(`Today is ${this.weather}.`);
             }
         }

         let myData = new MyData();
         myData.printMessages();


    - React development does not use inheritance directly.  It uses composition to create
        complex features instead.  

      The exception to this rule is when a React component is defined using a class.  In
        this case, 'extends' is used to ensure the right features are available in the new
        component.

        import React, { Component } from "react";

        export default class App extends Component {
            render = () =>
                <div className="m-2">
                    <div className="form-group">
                        <label>Name:</label>
                        <input className="form-control" />
                    </div>
                    <div className="form-group">
                        <label>City:</label>
                        <input className="form-control" />
                    </div>
                </div>
        }



- Copying Properties From One Object to Another

    - Some important features in React rely on copying the properties from one object
        to another.

        let myData = new MyData();
        let secondObject = {};

        Object.assign(secondObject, myData);

        secondObject.printMessages();


    - The spread operator can also be used to copy object properties.

        let myData = new MyData();
        let secondObject = { ...myData, weather: "cloudy"};

        console.log(`myData: ${ myData.weather}, secondObject: ${secondObject.weather}`); 



- Capturing Parameter Names From Objects

    - When an object is received as a parameter, accessing the properties in it can be 
        verbose.  For instance:

        const myData = {
            name: "Bob",
            location: {
                city: "Paris",
                country: "France"
            },
            employment: {
                title: "Manager",
                dept: "Sales"
            }
        }

        function printDetails(data) {
            console.log(`Name: ${data.name}, City: ${data.location.city},
                Role: ${data.employment.title}`);
        }

        printDetails(myData);


    - We can accomplish the same thing more elegantly by capturing specific properties as
        named parameters.

        function printDetails({ name, location: { city }, employment: { title }}) {
            console.log(`Name: ${name}, City: ${city}, Role: ${title}`);
        }



- Creating and Using a JavaScript Module

- Understanding Module Locations

- Exporting Named Features From a Module

- Defining Multiple Named Features in a Module

- Changing Module Feature Names

- Importing an Entire Module

- Understanding the Asynchronous Operation Problem

- Using a JavaScript Promise

- Simplifying the Asynchronous Code
