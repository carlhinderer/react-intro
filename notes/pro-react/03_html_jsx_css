-----------------------------------------------------------
CHAPTER 3 - HTML, JSX, and CSS
-----------------------------------------------------------

- Creating Project

    - Create the project.

        # Create project
        $ npx create-react-app primer


    - Add bootstrap.

        # Add bootstrap
        $ cd primer
        $ npm install bootstrap

        # Add to index.js
        import 'bootstrap/dist/css/bootstrap.css';



- Preparing the HTML File and Component

    - Replace the 'index.html' file.

        # File: public/index.html

        <!DOCTYPE html>
        <html lang="en">
          <head>
            <meta charset="utf-8" />
            <title>Primer</title>
          </head>
          <body>
            <h4 class="bg-primary text-white text-center p-2 m-1">
                Static HTML Element
            </h4>
            <div id="domParent"></div>
            <div id="root"></div>
          </body>
        </html>


    - Replace the 'App.js' file.

        # File: src/App.js

        import React, { Component } from "react";

        export default class App extends Component {

            render = () =>
                <h4 className="bg-primary text-white text-center p-2 m-1">
                    Component Element
                </h4>
        }


    - Now, we can run the example application.

        $ npm start



- Understanding the HTML and DOM Elements

    - Common HTML Elements:

        a
        button
        div
        h1-h6
        input
        table, tbody, thead, tr, th, td



- Creating HTML Elements Dynamically

    - HTML elements can be dynamically created using JavaScript and the DOM API that all
        modern browsers support.

        <body>
          <h4 class="bg-primary text-white text-center p-2 m-1">
            Static HTML Element
          </h4>

          <script>
            let element = document.createElement("h4");
            element.className = "bg-primary text-white text-center p-2 m-1";
            element.textContent = "DOM API HTML Element";
            document.getElementById("domParent").appendChild(element);
          </script>
        </body>



- Creating Elements Dynamically Using a React Component

    - The 'render' method in App.js combines aspects of static and dynamic HTML.

        export default class App extends Component {
            render = () =>
                <h4 className="bg-primary text-white text-center p-2 m-1">
                    Component Element
                </h4>
        }



- Using Expressions in React Elements

    - The ability to use expressions to configure elements is one of the key features of
        React and JSX.  Expressions are denoted by { curly braces }.

         const message = "This is a constant";

         export default class App extends Component {
             render = () =>
                 <h4 className="bg-primary text-white text-center p-2 m-1">
                     { message }
                 </h4>
         }



- Mixing Expressions and Static Content

    - Static content and expressions can be mixed together.

        const count = 4;

        <h4 className="bg-primary text-white text-center p-2 m-1">
            Number of things: { count }
        </h4>



- Performing Computation in Expressions

    - Expressions can be used for any kind of computation.

        const count = 4;

        <h4 className="bg-primary text-white text-center p-2 m-1">
            Number of things: { count % 2 === 0 ? "Even" : "Odd" }
        </h4>


    - We can call functions inside of expressions.

        function isEven() {
            return count % 2 === 0 ? "Even" : "Odd";
        }

        <h4 className="bg-primary text-white text-center p-2 m-1">
            Number of things: { isEven() }
        </h4>
        


- Accessing Component Properties and Methods

    - The initial state of a component is configured in it's constructor.  The 'this' 
        keyword must always be used when the state of a component is being accessed.

        export default class App extends Component {

            constructor(props) {
                super(props);
                this.state = {
                    count: 4
                }
            }

            isEven(val) {
                return val % 2 === 0 ? "Even" : "Odd";
            }

            render = () =>
                <h4 className="bg-primary text-white text-center p-2 m-1">
                    Number of things: { this.isEven(this.state.count) }
                </h4>
        }



- Using Expressions to Set Prop Values

    - Expressions can be used to set the value of props, which allows HTML attributes
        to be configured.

        getClassName(val) {
            return val % 2 === 0
                ? "bg-primary text-white text-center p-2 m-1"
                : "bg-secondary text-white text-center p-2 m-1"
        }

        <h4 className={this.getClassName(this.state.count)}>
            Number of things: { this.isEven(this.state.count) }
        </h4>



- Using Expressions to Handle Events

    - Expressions are used to tell React how to respond to events when they are triggred
        by an element.

        handleClick = () => this.setState({ count: this.state.count + 1});

        <button className="btn btn-info m-2" onClick={ this.handleClick }>
            Click Me
        </button>



- Understanding Bootstrap

- Applying Basic Bootstrap Classes

- Using Bootstrap to Create Grids

- Using Bootstrap to Style Tables

- Using Bootstrap to Style Forms