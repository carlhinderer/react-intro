-----------------------------------------------------------
CHAPTER 3 - HTML, JSX, and CSS
-----------------------------------------------------------

- Creating Project

    - Create the project.

        # Create project
        $ npx create-react-app primer


    - Add bootstrap.

        # Add bootstrap
        $ cd primer
        $ npm install bootstrap

        # Add to index.js
        import 'bootstrap/dist/css/bootstrap.css';



- Preparing the HTML File and Component

    - Replace the 'index.html' file.

        # File: public/index.html

        <!DOCTYPE html>
        <html lang="en">
          <head>
            <meta charset="utf-8" />
            <title>Primer</title>
          </head>
          <body>
            <h4 class="bg-primary text-white text-center p-2 m-1">
                Static HTML Element
            </h4>
            <div id="domParent"></div>
            <div id="root"></div>
          </body>
        </html>


    - Replace the 'App.js' file.

        # File: src/App.js

        import React, { Component } from "react";

        export default class App extends Component {

            render = () =>
                <h4 className="bg-primary text-white text-center p-2 m-1">
                    Component Element
                </h4>
        }


    - Now, we can run the example application.

        $ npm start



- Understanding the HTML and DOM Elements

    - Common HTML Elements:

        a
        button
        div
        h1-h6
        input
        table, tbody, thead, tr, th, td



- Creating HTML Elements Dynamically

    - HTML elements can be dynamically created using JavaScript and the DOM API that all
        modern browsers support.

        <body>
          <h4 class="bg-primary text-white text-center p-2 m-1">
            Static HTML Element
          </h4>

          <script>
            let element = document.createElement("h4");
            element.className = "bg-primary text-white text-center p-2 m-1";
            element.textContent = "DOM API HTML Element";
            document.getElementById("domParent").appendChild(element);
          </script>
        </body>



- Creating Elements Dynamically Using a React Component

    - The 'render' method in App.js combines aspects of static and dynamic HTML.

        export default class App extends Component {
            render = () =>
                <h4 className="bg-primary text-white text-center p-2 m-1">
                    Component Element
                </h4>
        }



- Using Expressions in React Elements

    - The ability to use expressions to configure elements is one of the key features of
        React and JSX.  Expressions are denoted by { curly braces }.

         const message = "This is a constant";

         export default class App extends Component {
             render = () =>
                 <h4 className="bg-primary text-white text-center p-2 m-1">
                     { message }
                 </h4>
         }



- Mixing Expressions and Static Content

    - Static content and expressions can be mixed together.

         const count = 4;

         export default class App extends Component {
             render = () =>
                 <h4 className="bg-primary text-white text-center p-2 m-1">
                     Number of things: { count }
                 </h4>
         }



- Performing Computation in Expressions

- Accessing Component Properties and Methods

- Using Expressions to Set Prop Values

- Using Expressions to Handle Events

- Understanding Bootstrap

- Applying Basic Bootstrap Classes

- Using Bootstrap to Create Grids

- Using Bootstrap to Style Tables

- Using Bootstrap to Style Forms