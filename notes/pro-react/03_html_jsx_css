-----------------------------------------------------------
CHAPTER 3 - HTML, JSX, and CSS
-----------------------------------------------------------

- Creating Project

    - Create the project.

        # Create project
        $ npx create-react-app primer


    - Add bootstrap.

        # Add bootstrap
        $ cd primer
        $ npm install bootstrap

        # Add to index.js
        import 'bootstrap/dist/css/bootstrap.css';



- Preparing the HTML File and Component

    - Replace the 'index.html' file.

        # File: public/index.html

        <!DOCTYPE html>
        <html lang="en">
          <head>
            <meta charset="utf-8" />
            <title>Primer</title>
          </head>
          <body>
            <h4 class="bg-primary text-white text-center p-2 m-1">
                Static HTML Element
            </h4>
            <div id="domParent"></div>
            <div id="root"></div>
          </body>
        </html>


    - Replace the 'App.js' file.

        # File: src/App.js

        import React, { Component } from "react";

        export default class App extends Component {

            render = () =>
                <h4 className="bg-primary text-white text-center p-2 m-1">
                    Component Element
                </h4>
        }


    - Now, we can run the example application.

        $ npm start



- Understanding the HTML and DOM Elements

    - Common HTML Elements:

        a
        button
        div
        h1-h6
        input
        table, tbody, thead, tr, th, td



- Creating HTML Elements Dynamically

    - HTML elements can be dynamically created using JavaScript and the DOM API that all
        modern browsers support.

        <body>
          <h4 class="bg-primary text-white text-center p-2 m-1">
            Static HTML Element
          </h4>

          <script>
            let element = document.createElement("h4");
            element.className = "bg-primary text-white text-center p-2 m-1";
            element.textContent = "DOM API HTML Element";
            document.getElementById("domParent").appendChild(element);
          </script>
        </body>



- Creating Elements Dynamically Using a React Component

    - The 'render' method in App.js combines aspects of static and dynamic HTML.

        export default class App extends Component {
            render = () =>
                <h4 className="bg-primary text-white text-center p-2 m-1">
                    Component Element
                </h4>
        }



- Using Expressions in React Elements

    - The ability to use expressions to configure elements is one of the key features of
        React and JSX.  Expressions are denoted by { curly braces }.

         const message = "This is a constant";

         export default class App extends Component {
             render = () =>
                 <h4 className="bg-primary text-white text-center p-2 m-1">
                     { message }
                 </h4>
         }



- Mixing Expressions and Static Content

    - Static content and expressions can be mixed together.

        const count = 4;

        <h4 className="bg-primary text-white text-center p-2 m-1">
            Number of things: { count }
        </h4>



- Performing Computation in Expressions

    - Expressions can be used for any kind of computation.

        const count = 4;

        <h4 className="bg-primary text-white text-center p-2 m-1">
            Number of things: { count % 2 === 0 ? "Even" : "Odd" }
        </h4>


    - We can call functions inside of expressions.

        function isEven() {
            return count % 2 === 0 ? "Even" : "Odd";
        }

        <h4 className="bg-primary text-white text-center p-2 m-1">
            Number of things: { isEven() }
        </h4>
        


- Accessing Component Properties and Methods

    - The initial state of a component is configured in it's constructor.  The 'this' 
        keyword must always be used when the state of a component is being accessed.

        export default class App extends Component {

            constructor(props) {
                super(props);
                this.state = {
                    count: 4
                }
            }

            isEven(val) {
                return val % 2 === 0 ? "Even" : "Odd";
            }

            render = () =>
                <h4 className="bg-primary text-white text-center p-2 m-1">
                    Number of things: { this.isEven(this.state.count) }
                </h4>
        }



- Using Expressions to Set Prop Values

    - Expressions can be used to set the value of props, which allows HTML attributes
        to be configured.

        getClassName(val) {
            return val % 2 === 0
                ? "bg-primary text-white text-center p-2 m-1"
                : "bg-secondary text-white text-center p-2 m-1"
        }

        <h4 className={this.getClassName(this.state.count)}>
            Number of things: { this.isEven(this.state.count) }
        </h4>



- Using Expressions to Handle Events

    - Expressions are used to tell React how to respond to events when they are triggred
        by an element.

        handleClick = () => this.setState({ count: this.state.count + 1});

        <button className="btn btn-info m-2" onClick={ this.handleClick }>
            Click Me
        </button>



- Understanding Bootstrap

    - Bootstrap, originally developed at Twitter, is the most popular and widely used
        CSS framework.

      It is well-supported, works well across browsers, and is simple to use.



- Applying Basic Bootstrap Classes

    - Here is an example of bootstrap classes being used:

        <h4 className="bg-primary text-white text-center p-2 m-1">

        bg-primary   =  contextual class
        text-white   =  text color in element is white
        text-center  =  horizontally centers element's content
        p-2          =  padding
        m-1          =  margin


    - Contextual classes apply styles to an item based on it's use.

        Name           Description
        -------------------------------------------------------------
        primary        Indicates the main action or area of content

        secondary      Indicates the supporting areas of content

        success        Indicates a successful outcome

        info           Presents additional information

        warning        Presents warnings

        danger         Presents serious warnings

        muted          De-emphasizes content

        dark           Increases contrast by using a dark color

        white          Increases contrast by using white


    - Padding and margins 

        - can have a 't', 'b', 'r', or 'l' to specify side, if not present all sides are set
        - can have a value from 0 (none) to 5 (most)

        p-1
        m-0
        pt-5
        ml-3



- Using Bootstrap to Create Grids

    - Bootstrap provides style classes that can be used to create different kinds of grid
        layout, ranging from 1-12 columns.  

        render = () =>
            <div className="container-fluid p-4">
                <div className="row bg-info text-white p-2">
                    <div className="col font-weight-bold">Value</div>
                    <div className="col-6 font-weight-bold">Even?</div>
                </div>
                <div className="row bg-light p-2 border">
                    <div className="col">{ this.state.count }</div>
                    <div className="col-6">{ this.isEven( this.state.count) }</div>
                </div>
                <div className="row">
                    <div className="col">
                        <button className="btn btn-info m-2"
                                onClick={ this.handleClick }>
                            Click Me
                        </button>
                    </div>
                </div>
            </div>


    - The Bootstrap grid layout is simple to use.  The top-level div is assigned to the 
        'container' class (or 'container-fluid' to span the entire available space).

    
    - Each row defines 12 columns, and you specify how many columns each child element will
        occupy.  For example, 'col-1' specifies that an item occupies 1 column, 'col-2' spans
        2 columns, 'col-12' fills an entire row.

      If just 'col' is used, it is allocated an equal amount of the reaming columns.



- Using Bootstrap to Style Tables

    - Bootstrap CSS classes for tables:

        Name               Description
        -----------------------------------------------------------------------
        table              Applies general styling to a table element and its rows

        table-striped      Applies alternate-row striping to the rows in the table body

        table-bordered     Applies borders to all rows and columns

        table-sm           Reduces the spacing in the table to create a more compact layout


    - Here is an example:

        render = () =>
            <table className="table table-striped table-bordered table-sm">
                <thead  className="bg-info text-white">
                    <tr><th>Value</th><th>Even?</th></tr>
                </thead>
                <tbody>
                    <tr>
                        <td>{ this.state.count }</td>
                        <td>{ this.isEven(this.state.count) } </td>
                    </tr>
                </tbody>
                <tfoot className="text-center">
                    <tr>
                        <td colSpan="2">
                            <button className="btn btn-info m-2"
                                    onClick={ this.handleClick }>
                                Click Me
                            </button>
                        </td>
                    </tr>
                </tfoot>
            </table>


    - Note that when working with tables in Bootstrap, it's a good idea to use the full set of
        table elements (especially thead and tbody).



- Using Bootstrap to Style Forms 

    - The basic styling for forms is achieved by applyting the 'form-group' class to a div
        element containing a label and input, with the input getting the 'form-control'
        class.

        render = () =>
            <div className="m-2">
                <div className="form-group">
                    <label>Name:</label>
                    <input className="form-control" />
                </div>
                <div className="form-group">
                    <label>City:</label>
                    <input className="form-control" />
                </div>
            </div>