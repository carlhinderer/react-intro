-----------------------------------------------------------
CHAPTER 1 - FIRST REACT APPLICATION
-----------------------------------------------------------

- Node 

    - Node was created in 2009 as an application runtime for server-side applications 
        written in JavaScript.  It's based on the JS engine used in the Chrome browser.

      While it has had success as an application server, it has also provided the foundation of
        a new generation of development and build tools.

        # Get Node Version
        $ node -v

        # Get npm Version
        $ npm -v



- The create-react-app Package

    - The create-react-app package is the standard way to create and manage complex React
        packages.  It provides a complete development toolchain.

        # Install create-react-app
        $ npm install --global create-react-app@2.1.2



- The react-devtools Browser Extension

    - The react-devtools browser extension, available in Firefox and Chrome, is very useful,
        especially when working on complex projects.



- Creating the Project

    - The 'npx' command is installed as part of node.  It is used to round out the experience
        of using packages from the npm registry.

        # Create new react app
        $ npx create-react-app todo


    - The directory structure of the new application looks like:

        > todo
            > node_modules
            > public
                favicon.ico
                index.html
                manifest.json
            > src
                App.css
                App.js
                App.test.js
                index.css
                index.js
                logo.svg
                registerServiceWorker.js
            .gitignore
            package.json
            package-lock.json
            README.md


    - Important files include:

        public/index.html
          This is the html file loaded by the browser.  It contains an element in which the 
            application is displayed and a script element that holds the JS files.

        src/index.js
          This is the JS file responsible for configuring and starting the React application.
            We used it to add the Bootstrap CSS framework.

        src/App.js
          This is the React component, which contains the HTML content that will be displayed
            to the user and the JS code required by the HTML.  Components are the building
            blocks of React applications.



- Adding the Bootstrap Framework

    - First, we need to add bootstrap to the project:
    
        # Add bootstrap to project
        $ cd todo
        $ npm install bootstrap@4.1.2


    - Next, we need to add it to the imports in our 'index.js' file.  Note that the 'import'
        statement can declare both JS and CSS dependencies.

        # Add after other import statements in todo/src/index.js
        import 'bootstrap/dist/css/bootstrap.css';



- Starting the Development Tools

    - The 'npm start' command will compile the project, package it up, and deliver it to the
        browser.

        # Start app
        $ npm start



- Replacing the Placeholder Context

    - We'll change the default placeholder content to just display a title bar for our new
        application.

        # File: src/App.js
        import React, { Component } from 'react';
        import logo from './logo.svg';
        import './App.css';
        
        export default class App extends Component {
            render() {
                return (
                    <div>
                        <h4 className="bg-primary text-white text-center p-2">
                            To Do List
                        </h4>
                    </div>
                )
            };
        }


    - Here, the 'App.js' file contains a React component named 'App'.  Components are the main
        building block for React applications.

      Components are written using JSX, a superset of JavaScript that allows HTML to be 
        included in files without any special quoting.


    - Note that JSX can be a little strange at first glance.  For instance, since the JSX files
        are actually JavaScript, and 'class' is a keyword in modern JavaScript, we cannot use
        it for CSS classes.  Here, we use 'className' instead.

        <h4 className="bg-primary text-white text-center p-2">
            To Do List
        </h4>



- Displaying Dynamic Content

    - React makes displaying dynamic content easy with the 'expressions' feature.  An
        expression is a fragment of JS that is evaluated when a component's 'render'
        method is called.

      Many expressions are also used to display data values defined by the component to
        keep track of the state of the application, known as 'state data'.  Expressions
        are denoted with curly braces.


        import React, { Component } from 'react';

        export default class App extends Component {

            constructor(props) {
                super(props);
                this.state = {
                    userName: "Adam"
                }
            }

            render() {
                return (
                    <div>
                        <h4 className="bg-primary text-white text-center p-2">
                            { this.state.userName }'s To Do List
                        </h4>
                    </div>
                )
            };
        }


    - The 'props' parameter is important, because it allows one React component to 
        configure another.  


    - React components have a special property named 'state' which is used to define state
        data.  



- Understanding State Data Changes

- Adding the To-Do Application Features

- Displaying the To-Do Items

- Introducing Additional Components

- Using the Child Components

- Managing the Visibility of Completed Tasks

- Persistently Storing Data