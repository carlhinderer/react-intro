-----------------------------------------------------------------------
| CHAPTER 1 - MODERN JAVASCRIPT                                       |
-----------------------------------------------------------------------

- ES5 vs ES6

    - ES5 was released in 2009, and is currently considered a baseline implementation, with wide support
        across desktop and mobile devices.

    - ES6 was released in 2015, introduces significant improvements, and remains backwards compatible with
        ES5.  Since it's release, there have been yearly releases to improve the language.

    - ES6 and later features aren't guaranteed to be implemented on all browsers.  To avoid code failing
        due to missing features, modern JS frameworks rely on a technique called transpiling, which converts
        modern code into ES5 code.



- Semicolons

    - JS has weird semicolon rules.  Most of the time they aren't required, but sometimes they are.


    - To avoid confusion, we'll use them after all statements.  But, we won't use them after a closing }
        or at the end of a function declaration or a control structure, such as a loop or a conditional.

        const a = 1;    // Semicolon here

        function f() {
          console.log('this is f');     // Semicolon here
        }   // But not here


    - An exception is when an arrow function is assigned to a variable or constant, we do use the semicolon.

        const f = () => {
          console.log('this is f');
        };



- Trailing Commas

    - Trailing commas are supported:

        const myArray = [
          1,
          3,
          5,
        ];

        const myObject = {
          name: 'susan',
          age: 20,
        };



- Imports and Exports

    - Instead of the insane use of global scope in traditional JS, modern frameworks use a dependency model
        that is based on imports and exports.


    - A JS module that wants to make a function or variable available for other modules to use can declare
        it as a default export.

        cool.js
        --------------------
        export default function myCoolFunction() {
          console.log('This is cool!');
        }

      Any other module that wants to use it can then import it:

        import myCoolFunction from './cool';


    - In this case './cool' is the relative path of the importing file.  The '.js' extension can be included,
        but it is optional.


    - Since a module can only have one default export, the importing module can call the imported function
        any name it wants.  This will work also:

        import myReallyCoolFunction from './cool';


    - Importing from third-party libraries works similarly, but the import location uses the library name
        instead of a local path.

        import React from 'react';


    - A module can only have one default export, but it can also export additional things.

        cool.js
        --------------------
        export const PI = 3.14;
        export const SQRT2 = 1.41;

        export default function myCoolFunction() {
          console.log('This is cool!');
        }       

      In the importing file:

        // Non-default imports
        import { SQRT2 } from './cool';
        import { SQRT2, PI } from './cool';

        // Default and non-default imports together
        import myCoolFunction, { SQRT2, PI } from './cool';



- Variables and Constants

    - Since the 'var' method of declaring variables has some scoping quirks, ES6 introduced the 'let' and
        'const' keywords for declaring variables and constants.


    - To define a variable:

        // Value will be special value undefined
        let a;

        let b = 1;


    - A constant is a variable that can only be assigned a value when it is declared.

        const c = 3;


    - Note that confusingly, you can mutate a constant.  You just can't reassign it.

        const d = [1, 2, 3];
        d.push(4);



- Equality and Inequality Comparisons

    - Older JS implementations had very strange rules in regard to automatic casting between different
        types.  For this reasons, the == and != operators work in ways you might not expect.


    - Recent JS versions support the new comparison operators === and !==, so that more predictable
        comparisons can be used.

        let a = 1;

        console.log(a === 1);       // true
        console.log(a === '1');     // false
        console.log(a !== '1');     // true



- String Interpolations

    - It is often necessary to create a string with a mix of static text and variables.  ES6 uses 'template
        literals' for this:

        const name = 'susan';
        let greeting = 'Hello, ${name}!';



- For-Of Loops

    - ES6 introduced the for..of statement to iterate over an array of elements.

        const allTheNames = ['susan', 'john', 'alice'];

        for (name of allTheNames) {
          console.log(names);
        }



- Arrow Functions

    - ES6 introduces an alternate syntax for the definition of functions.  In addition to being more
        concise, it also has more consistent behavior for the 'this' keyword compared to the 'function'
        keyword.


    - Here is an example of the traditional way of defining a function:

        function mult(x, y) {
          const result = x * y;
          return result;
        }

        // Call function
        mult(2, 3);


    - Here is the new arrow function syntax:

        const mult = (x, y) => {
          const results = x * y;
          return result;
        }


    - If the function has a single line, we can omit the curly braces and the 'return' keyword.

        const mult = (x, y) => x * y;


    - If the function accepts a single argument instead of 2, the parenthesis can be omitted.

        const square = x => x * x;

        // Call function
        square(2);


    - When passing a callback function as an argument to another function, the arrow function syntax is
        more convenient.

        // Traditional way
        longTask(function (result { console.log(result); });

        // Arrow function way
        longTask(result => console.log(result));



- Promises

    - A 'promise' is a proxy object that is returned to the caller of an asynchronous operation running in 
        the background.  This object can be used by the caller to keep track of the background task and
        obtain a result from it when it completes.


    - The promise object has the 'then()' and 'catch()' methods that allow the construction of chains of
        asynchronous operations with solid error handling.


    - Many internal and third-party JS libraries return promises.  Here, we use the 'fetch()' function to
        make an HTTP request, and then print the status code of the response.

        fetch('http://example.com').then(r => console.log(r.status));


    - Promises can be chained.  A common case is when making an HTTP request that returns a response with
        some data.  This request operation is chained to a second background operation that reads JSON data
        from the server response.

        fetch('http://example.com/data.json')
          .then(r => r.json())
          .then(data => console.log(data));

      Once the 'fetch()'' call completes, the callback function passed to the first 'then' executes with 
        the response object as an argument.  This callback returns 'r.json()', a method of the response
        object that also returns a promise.  The second 'then' is invoked, receiving the parsed json
        as an argument.


    - To handle errors, the 'catch()' method can be added to the chain:

        fetch('http://example.com/data.json')
          .then(r => r.json())
          .then(data => console.log(data))
          .catch(error => console.log('Error: ${error}'));



- Async and Await

    - Promises are a nice improvement that helps simplify the handling of asynchronous applications, but
        having to chain several actions in 'then()' calls can still be difficult to read and maintain.
        In the 2017 revision of ECMAScript, the 'async' and 'await' keywords were introduced as an
        alternate way to work with promises.


    - Using async/await syntax, the previous statement can be changed to:

        async function f() {
          const r = await fetch('https://example.com/data.json');
          const data = await r.json();
          console.log(data);
        }


    - With this syntax, the asynchronous tasks can be given sequentially, and the resulting code looks
        very close to how it would be with synchronous function calls.  Note that the 'await' keyword can
        only be used inside functions declared with 'async'.


    - Error handling in async functions can be implemented with 'try/catch'.

        async function f() {
          try {
            const r = await fetch('https://example.com/data.json');
            const data = await r.json();
            console.log(data);
          }
          catch (error) {
            console.log('Error: ${error}');
          }
        }


    - An interesting feature of functions declared as async is that they are automatically updated to
        return a promise.  The 'f()' function can be chained to additional asynchronous tasks using the
        'then()' method if desired.

        f().then(() => console.log('done!'));


    - It can also be awaited if the calling function is also async:

        async function g() {
          await f();
          console.log('done!');
        }


    - The new arrow function can also be used with async functions:

        const g = async () => {
          await f();
          console.log('done!');
        }



- Spread Operator

    - The 'spread operator' ... can be used to expand an array or object in place.  This allows for very
        concise expressions when working with arrays or objects.


    - To find the minimum in a list of numbers:

        const a = [5, 3, 9, 2, 7];

        console.log(Math.min(...a));


    - The spread operator can also be used to create a new array by mixing another array with new
        elements:

        const a = [5, 3, 9, 2, 7];
        const b = [10, ...a, 8, 0];


    - It also allows for a simple way to do a shallow copy of an array:

        const c = [...a];


    - The spread syntax also works with objects:

        const d = {name: 'susan'};
        const e = {...d, age: 20};
        const f = {...d};


    - The spread operator with objects can be used to make partial updates:

        const user = {name: 'susan', age: 20};
        const new_user = {...user, age: 21};



- Object Property Shorthand

    - The object property shorthand provides a simplified syntax for object properties.

        const name = 'susan';
        const age = 20;

        // Long way to create an object
        const user = {name: name, age: age};

        // Shorthand
        const user = {name, age};


    - Shorthand and regular properties can be combined:

        const user = {name, age, active: true};



- Destructuring Assignments

    - Destructuring assignments are used to simplify array and object assignment.  The right side value can
        be decomposed into its elements on the fly as part of the assignment.

        const a = ['susan', 20];
        let name, age;

        [name, age] = a;


    - If the left side has more elements than the right side, the extra elements on the left are assigned
        the undefined value.  If the right side has more elements, the extra elements are discarded.


    - We can combine the destructuring assignment and the spread operator.

        const b = [1, 2, 3, 4, 5];
        let c, d, e;
        [c, d, ...e] = b;

        console.log(c);  // 1
        console.log(d);  // 2
        console.log(e);  // [3, 4, 5]


    - Destructuring assignments can also be used with objects:

        const user = {name: 'susan', active: true, age: 20};
        const {name, age} = user;

        console.log(name);  // susan
        console.log(age);  // 20


    - This technique can also be applied to function arguments:

        const f = ({ name, age }) => {
          console.log(name);  // susan
          console.log(age);  // 20
        };

        const user = {name: 'susan', active: true, age: 20};
        f(user);



- Classes

    - ES6 introduced classes, which had never before been available in JS.

        // Class Definition
        class User {
          constructor(name, age, active) {  // constructor
            this.name = name;
            this.age = age;
            this.active = active;
          }

          isActive() {  // standard method
            return this.active;
          }

          async read() {  // async method
            const r = await fetch(`https://example.org/user/${this.name}`);
            const data = await r.json();
            return data;
          }
        }


        // Create an instance
        const user = new User('susan', 20, true);



- JSX

    - JSX (short for JavaScript XML) is not a part of ES6.  It is a standalone feature.


    - Here is the traditional way to create an HTML <p> element:

        const paragraph = document.createElement('p');
        paragraph.innerText = 'Hello, world!';


    - With JSX:

        const paragraph = <p>Hello, world!</p>;


    - Here is an example of an HTML table:

        const myTable = (
          <table>
            <tr>
              <th>Name</th>
              <th>Age</th>
            </tr>
            <tr>
              <td>Susan</td>
              <td>20</td>
            </tr>
            <tr>
              <td>John</td>
              <td>45</td>
            </tr>
          </table>
        );